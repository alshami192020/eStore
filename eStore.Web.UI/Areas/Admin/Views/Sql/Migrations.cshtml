@model MigrationsModel

@{
    ViewBag.Title = "Migrations";
}
<div class="row">
    <div class="col-md-4">
        @Html.LabelFor(m => m.Database)
    </div>
    <div class="col-md-4">
        @Html.LabelFor(m => m.Local)
    </div>
    <div class="col-md-4">
        @Html.LabelFor(m => m.Pending)
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        @Html.ListBoxFor(m => m.Database, new SelectList(Model.Database), new { @class = "migrlist", data_bind="options: migrationsDb" })
    </div>
    <div class="col-md-4">
        @Html.ListBoxFor(m => m.Local, new SelectList(Model.Local), new { @class = "migrlist", data_bind = "options: migrationsLocal" })
    </div>
    <div class="col-md-4">
        @Html.ListBoxFor(m => m.Pending, new SelectList(Model.Pending), new { @class = "migrlist", data_bind = "options: migrationsPending" })
    </div>
</div>
<br>
@*<div class="row">*@
<div class="col-md-6">
    <div class="row">
        <button class="btn btn-primary" data-bind="click: reload">Reload</button>
    </div>
    <br>
    <div class="row">
        <div id="infoAlert" class="alert alert-info in">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong>Migration target and direction</strong>
        </div>
        <div id="warnAlert" class="alert alert-warning fade hide">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong>You should select the migration target or direction</strong>
        </div>
        <div id="successAlert" class="alert alert-success fade hide">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong>The database has successfully migrated!</strong>
        </div>
        <div id="errAlert" class="alert alert-danger fade hide">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong id="errmsg">Migration failed!</strong>
        </div>
    </div>
    <div class="row">
        @using (Ajax.BeginForm(
            new AjaxOptions
            {
                HttpMethod = "POST",
                OnBegin = "onBegin",
                OnSuccess = "onSuccess",
                OnFailure = "onFailure",
                Url = Url.HttpRouteUrl("DefaultApi", new { controller = "Migration", action = "UpdateTo" })
            }))
        {
            <div class="form-group">
                <span class="label label-default">Target:</span>
                <input type="text" id="target" name="target" class="form-control" />
            </div>
            <div class="btn-group" data-toggle="buttons">
                <label class="btn btn-default">
                    <input type="radio" name="isDowngrade" id="option1" value=true>Initial
                </label>
                <label class="btn btn-default">
                    <input type="radio" name="isDowngrade" id="option2" value=false>Latest
                </label>
            </div>
            <div class="btn-group">
                <input type="submit" class="btn btn-primary" value="Go!">
            </div>
        }
    </div>
</div>
@*</div>*@

<style>
    .migrlist {
        width: 300px;
    }
</style>


@section Scripts {
    @Scripts.Render("~/Scripts/lib/jquery.unobtrusive-ajax.js")
    @Scripts.Render("~/Scripts/lib/bootstrap.js")
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        function onBegin(ajaxContext) {

            if (!$('#option1').is(':checked') && !$('#option2').is(':checked')
                && $('#target').val().length == 0) {
                $('#infoAlert').removeClass('in').addClass('hide');
                $('#warnAlert').addClass('in').removeClass('hide');
                return false;
            }

            $('.close').click(function () {
                $(this).parent().removeClass('in');
            });

            return true;
        }

        function onSuccess() {
            $('#infoAlert').removeClass('in').addClass('hide');
            $('#warnAlert').removeClass('in').addClass('hide');
            $('#successAlert').addClass('in').removeClass('hide');

            vm.reload();
        }

        function onFailure(ajaxContext) {
            $('#infoAlert').removeClass('in').addClass('hide');
            $('#warnAlert').removeClass('in').addClass('hide');
            $('#errAlert').addClass('in').removeClass('hide');
            $('#errmsg').text(ajaxContext.responseText);
        }

        var vm = (function (model) {

            var migrationsDb = ko.observable(model.Database);
            var migrationsLocal = ko.observable(model.Local);
            var migrationsPending = ko.observable(model.Pending);

            var reload = function () {
                $.getJSON('@Url.HttpRouteUrl("DefaultApi", new {controller = "Migration", action = "List"})', null,
                    function (data) {
                        migrationsDb(data.database);
                        migrationsLocal(data.local);
                        migrationsPending(data.pending);
                    });
            };

            var vm = {
                reload: reload,
                migrationsDb: migrationsDb,
                migrationsLocal: migrationsLocal,
                migrationsPending: migrationsPending,

            }

            return vm;

        })(@Html.ToJSON(Model));

        ko.applyBindings(vm);
    </script>
}


