@model FilterParams

@{
    ViewBag.Title = "User list";
}

<script type="text/html" id="TableRow">
    <tr>
        <td data-bind="text: UserId"></td>
        <td data-bind="text: Name"></td>
        <td data-bind="text: Email"></td>
        <td data-bind="text: RoleId"></td>
        <td>
            <a data-bind="attr: { 'href': '@Url.Action("Edit")/' + UserId}"><span class="glyphicon glyphicon-pencil"></span></a>
            <a href="#myModal" role="button" data-toggle="modal"><span class="glyphicon glyphicon-remove"></span></a>
        </td>
    </tr>
</script>

<script type="text/html" id="PagingPanel">
    <div class="pagination">
        <ul class="pagination">
            <li data-bind="css: { disabled: PageNumber() === 1 }"><a href="#" data-bind="click: back">Prev</a></li>
            <!-- ko foreach: $root.allPages -->
            <li data-bind="css: { active: $data.pageIdx === $root.paging.PageNumber()}"><a href="#" data-bind="text: $data.pageIdx, click: function() { $root.paging.page($data.pageIdx); }"></a></li>
            <!-- /ko -->
            <li data-bind="css: { disabled: PageNumber() === TotalPagesCount() }"><a href="#" data-bind="click: next">Next</a></li>
        </ul>
    </div>
</script>

<script type="text/html" id="FiltrationPanel">
    <label>
        <input type="checkbox" data-bind="checked: ShowAdmins" />Show Admins</label>
    <br />
    <label>
        <input type="checkbox" data-bind="checked: ShowManagers" />Show Managers</label>
</script>

<div data-bind="template: {
    name: 'FiltrationPanel',
    data: filterParams
}">
</div>

<div class="page">
    <div class="btn-toolbar">
        @Html.ActionLink("New User", "Create", new { area = "admin" }, new { @class = "btn btn-primary" })
        <a href="#" class="btn btn-primary" data-bind="click: reload">Reload</a>
        <button class="btn">Import</button>
        <button class="btn">Export</button>
    </div>
    <br>
    <div class="well_">
        <table class="table table-striped table-condensed">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th></th>
                </tr>
            </thead>
            <tbody data-bind="template: { name: 'TableRow',foreach: rows}">
            </tbody>
        </table>
    </div>
</div>

<div data-bind="template: { name: 'PagingPanel', data: paging }">
</div>

<div class="modal small fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h3 id="myModalLabel">Delete Confirmation</h3>
            </div>
            <div class="modal-body">
                <p class="error-text">Are you sure you want to delete the user?</p>
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
                <button class="btn btn-danger" data-dismiss="modal">Delete</button>
            </div>
        </div>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        var AjaxGridViewModel = function(url, filterParams) {

            this.rows= ko.observableArray();
            this.filterParams = ko.mapping.fromJS(filterParams);
            this.paging = {
                PageNumber: ko.observable(1),
                TotalPagesCount: ko.observable(0),
                next: function () {
                    var pn = this.PageNumber();
                    if (pn < this.TotalPagesCount()) this.PageNumber(pn + 1);
                },
                back: function () {
                    var pn = this.PageNumber();
                    if (pn > 1) this.PageNumber(pn - 1);
                },
                page: function (index){
                    if (index >0 && index <= this.TotalPagesCount())
                        this.PageNumber(index)
                }
            };

            this.allPages = ko.dependentObservable(function () {
                var pages = [];
                for (i = 1; i <= this.paging.TotalPagesCount() ; i++) {
                    pages.push({ pageIdx: (i) });
                }
                return pages;
            }, this);

            this.reload = function(){
                var data = ko.toJS(this.filterParams);
                data.pageNumber = this.paging.PageNumber();
                $.ajax({
                    url: url,
                    type: 'POST',
                    data: data,
                    context: this,
                    success: function (data) {
                        console.log('post', data);
                        this.rows(data.Data);
                        this.paging.PageNumber(data.Paging.PageNumber);
                        this.paging.TotalPagesCount(data.Paging.TotalPagesCount);
                    }
                });
            }.bind(this);

            ko.dependentObservable(function () {
                //var data = ko.toJS(this.filterParams);
                //data.pageNumber = this.paging.PageNumber();
                //$.ajax({
                //    url: url,
                //    type: 'POST',
                //    data: data,
                //    context: this,
                //    success: function (data) {
                //        console.log('post', data);
                //        this.rows(data.Data);
                //        this.paging.PageNumber(data.Paging.PageNumber);
                //        this.paging.TotalPagesCount(data.Paging.TotalPagesCount);
                //    }
                //});
                this.reload();
            }, this);

            ko.dependentObservable(function () {
                var data = ko.toJS(this.filterParams);
                // Reset page number when any filtration parameters change
                // However this solution will cause double-load problem. Consider using pause-notifications
                this.paging.PageNumber(1);
            }, this);
        };

        var ajaxGrid = new AjaxGridViewModel('@Url.Action("UserList")', @Html.ToJSON(Model));

        ko.setTemplateEngine(new ko.nativeTemplateEngine());

        ko.applyBindings(ajaxGrid);
    </script>
}